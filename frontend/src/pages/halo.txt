1. Pages
a) src/pages/Login.js

jsx
import React, { useState, useContext } from 'react';
import { Box, Button, Input, Text, Heading, VStack, toaster } from '@chakra-ui/react';
import axios from 'axios';
import { AuthContext } from '../context/AuthContext';

const Login = () => {
  const { setAuth } = useContext(AuthContext);
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [loading, setLoading] = useState(false);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    try {
      const res = await axios.post(
        `${process.env.REACT_APP_API_URL || 'http://localhost:5000'}/auth/login`,
        { email, password }
      );
      setAuth({
        token: res.data.token,
        user: res.data.user,
      });
      toaster.create({
        title: 'Login successful',
        status: 'success',
        duration: 4000,
        isClosable: true,
      });
    } catch (err) {
      toaster.create({
        title: 'Login failed',
        description: err.response?.data?.message || 'Invalid credentials',
        status: 'error',
        duration: 5000,
        isClosable: true,
      });
    } finally {
      setLoading(false);
    }
  };

  return (
    <Box maxW="md" mx="auto" mt={10} p={6} boxShadow="md" borderRadius="md" bg="white">
      <Heading mb={6} color="blue.700" textAlign="center">Login</Heading>
      <form onSubmit={handleSubmit}>
        <VStack spacing={4} align="flex-start">
          <Box w="100%">
            <Text htmlFor="email" fontWeight="semibold" mb={1} as="label">Email</Text>
            <Input
              id="email"
              type="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              placeholder="your-email@example.com"
              required
            />
          </Box>
          <Box w="100%">
            <Text htmlFor="password" fontWeight="semibold" mb={1} as="label">Password</Text>
            <Input
              id="password"
              type="password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              placeholder="********"
              required
            />
          </Box>
          <Button type="submit" colorScheme="blue" width="full" isLoading={loading}>
            Login
          </Button>
        </VStack>
      </form>
      <Text mt={4} fontSize="sm" color="gray.600" textAlign="center">
        Forgot password? Contact admin.
      </Text>
    </Box>
  );
};

export default Login;

b) src/pages/Register.js

jsx
import React, { useState } from 'react';
import { Box, Button, Input, Select, Text, Heading, VStack, toaster } from '@chakra-ui/react';
import axios from 'axios';

const Register = () => {
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    password: '',
    role: '',
  });
  const [loading, setLoading] = useState(false);

  const handleChange = (e) =>
    setFormData((prev) => ({ ...prev, [e.target.name]: e.target.value }));

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    try {
      await axios.post(
        `${process.env.REACT_APP_API_URL || 'http://localhost:5000'}/auth/register`,
        formData
      );
      toaster.create({
        title: 'Registration successful',
        status: 'success',
        duration: 4000,
        isClosable: true,
      });
      setFormData({ name: '', email: '', password: '', role: '' });
    } catch (err) {
      toaster.create({
        title: 'Registration failed',
        description: err.response?.data?.message || 'Registration error',
        status: 'error',
        duration: 5000,
        isClosable: true,
      });
    } finally {
      setLoading(false);
    }
  };

  return (
    <Box maxW="md" mx="auto" mt={10} p={6} boxShadow="md" borderRadius="md" bg="white">
      <Heading mb={6} color="blue.700" textAlign="center">Register</Heading>

      <form onSubmit={handleSubmit}>
        <VStack spacing={4} align="flex-start">
          <Box w="100%">
            <Text as="label" htmlFor="name" fontWeight="semibold" mb={1}>Name</Text>
            <Input
              id="name"
              name="name"
              value={formData.name}
              onChange={handleChange}
              placeholder="Full name"
              required
            />
          </Box>
          <Box w="100%">
            <Text as="label" htmlFor="email" fontWeight="semibold" mb={1}>Email</Text>
            <Input
              id="email"
              name="email"
              type="email"
              value={formData.email}
              onChange={handleChange}
              placeholder="your-email@example.com"
              required
            />
          </Box>
          <Box w="100%">
            <Text as="label" htmlFor="password" fontWeight="semibold" mb={1}>Password</Text>
            <Input
              id="password"
              name="password"
              type="password"
              value={formData.password}
              onChange={handleChange}
              placeholder="Enter password"
              required
            />
          </Box>
          <Box w="100%">
            <Text as="label" htmlFor="role" fontWeight="semibold" mb={1}>Role</Text>
            <Select
              id="role"
              name="role"
              value={formData.role}
              onChange={handleChange}
              placeholder="Select role"
              required
            >
              <option value="student">Student</option>
              <option value="teacher">Teacher</option>
              <option value="parent">Parent</option>
            </Select>
          </Box>
          <Button type="submit" colorScheme="blue" width="full" isLoading={loading}>
            Register
          </Button>
        </VStack>
      </form>
    </Box>
  );
};

export default Register;

c) src/pages/Dashboard.js

jsx
import React, { useContext } from 'react';
import { Box, Heading, Text } from '@chakra-ui/react';
import { AuthContext } from '../context/AuthContext';

const Dashboard = () => {
  const { auth } = useContext(AuthContext);
  const name = auth?.user?.name || 'User';

  return (
    <Box p={6}>
      <Heading color="blue.700" mb={4}>Dashboard</Heading>
      <Text fontSize="xl">Welcome back, <strong>{name}</strong>!</Text>
      {/* Customize with widgets, stats, quick links... */}
    </Box>
  );
};

export default Dashboard;

d) src/pages/Attendance.js

jsx
import React, { useState, useEffect, useContext } from 'react';
import { Box, Heading, Select, Spinner, Text, Table, toaster } from '@chakra-ui/react';
import axios from 'axios';
import { AuthContext } from '../context/AuthContext';
import AttendanceForm from '../components/AttendanceForm';

const Attendance = () => {
  const { auth } = useContext(AuthContext);
  const isTeacher = auth?.user?.role === 'teacher';

  const [students, setStudents] = useState([]);
  const [studentId, setStudentId] = useState('');
  const [attendanceRecords, setAttendanceRecords] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  const fetchStudents = async () => {
    try {
      const res = await axios.get(
        `${process.env.REACT_APP_API_URL || 'http://localhost:5000'}/api/students`,
        { headers: { Authorization: `Bearer ${auth.token}` } }
      );
      setStudents(res.data);
    } catch {
      const msg = 'Failed to load students.';
      setError(msg);
      toaster.create({ title: 'Error', description: msg, status: 'error', duration: 5000, isClosable: true});
    }
  };

  const fetchAttendance = async () => {
    if (!studentId) {
      setAttendanceRecords([]);
      return;
    }
    setLoading(true);
    setError('');
    try {
      const res = await axios.get(
        `${process.env.REACT_APP_API_URL || 'http://localhost:5000'}/api/attendance/${studentId}`,
        { headers: { Authorization: `Bearer ${auth.token}` } }
      );
      setAttendanceRecords(res.data);
    } catch {
      const msg = 'Failed to load attendance records.';
      setError(msg);
      toaster.create({ title: 'Error', description: msg, status: 'error', duration: 5000, isClosable: true });
      setAttendanceRecords([]);
    } finally {
      setLoading(false);
    }
  };

  React.useEffect(() => {
    fetchStudents();
  }, []);

  React.useEffect(() => {
    fetchAttendance();
  }, [studentId]);

  return (
    <Box p={6}>
      <Heading mb={6} color="blue.700">Attendance</Heading>
      {isTeacher && (
        <Select mb={6} placeholder="Select student" value={studentId} onChange={(e) => setStudentId(e.target.value)}>
          {students.map((student) => (
            <option key={student._id} value={student._id}>{student.name}</option>
          ))}
        </Select>
      )}
      {isTeacher && studentId && (
        <AttendanceForm studentId={studentId} token={auth.token} onUpdate={fetchAttendance} />
      )}
      {loading && (
        <Box textAlign="center" py={6}><Spinner size="xl" /></Box>
      )}
      {error && <Text color="red.500" mb={4}>{error}</Text>}
      {!loading && attendanceRecords.length === 0 && <Text>No attendance records found.</Text>}
      {!loading && attendanceRecords.length > 0 && (
        <Box overflowX="auto" bg="white" borderRadius="md" boxShadow="sm" p={4}>
          <Table.Root>
            <Table.Header>
              <Table.Row>
                <Table.ColumnHeader>Date</Table.ColumnHeader>
                <Table.ColumnHeader>Status</Table.ColumnHeader>
              </Table.Row>
            </Table.Header>
            <Table.Body>
              {attendanceRecords.map((rec) => (
                <Table.Row key={rec._id}>
                  <Table.Cell>{new Date(rec.date).toLocaleDateString()}</Table.Cell>
                  <Table.Cell>{rec.status.charAt(0).toUpperCase() + rec.status.slice(1)}</Table.Cell>
                </Table.Row>
              ))}
            </Table.Body>
          </Table.Root>
        </Box>
      )}
    </Box>
  );
};

export default Attendance;

e) src/pages/Records.js

jsx
import React, { useState, useEffect, useContext } from 'react';
import { Box, Heading, Select, Spinner, Text, Table, toaster } from '@chakra-ui/react';
import axios from 'axios';
import { AuthContext } from '../context/AuthContext';
import RecordsForm from '../components/RecordsForm';

const Records = () => {
  const { auth } = useContext(AuthContext);
  const isTeacher = auth?.user?.role === 'teacher';

  const [students, setStudents] = useState([]);
  const [studentId, setStudentId] = useState('');
  const [record, setRecord] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  const fetchStudents = async () => {
    try {
      const res = await axios.get(
        `${process.env.REACT_APP_API_URL || 'http://localhost:5000'}/api/students`,
        { headers: { Authorization: `Bearer ${auth.token}` } }
      );
      setStudents(res.data);
    } catch {
      const msg = 'Failed to load students.';
      setError(msg);
      toaster.create({ title: 'Error', description: msg, status: 'error', duration: 5000, isClosable: true });
    }
  };

  const fetchRecord = async () => {
    if (!studentId) {
      setRecord(null);
      return;
    }
    setLoading(true);
    setError('');
    try {
      const res = await axios.get(
        `${process.env.REACT_APP_API_URL || 'http://localhost:5000'}/api/records/${studentId}`,
        { headers: { Authorization: `Bearer ${auth.token}` } }
      );
      setRecord(res.data);
    } catch {
      const msg = 'Failed to load student records.';
      setError(msg);
      toaster.create({ title: 'Error', description: msg, status: 'error', duration: 5000, isClosable: true });
      setRecord(null);
    } finally {
      setLoading(false);
    }
  };

  React.useEffect(() => {
    fetchStudents();
  }, []);

  React.useEffect(() => {
    fetchRecord();
  }, [studentId]);

  return (
    <Box p={6}>
      <Heading mb={6} color="blue.700">Student Activity Records</Heading>
      {isTeacher && (
        <Select mb={6} placeholder="Select student" value={studentId} onChange={(e) => setStudentId(e.target.value)}>
          {students.map((student) => (
            <option key={student._id} value={student._id}>{student.name}</option>
          ))}
        </Select>
      )}
      {isTeacher && studentId && (
        <RecordsForm studentId={studentId} token={auth.token} onUpdate={fetchRecord} />
      )}
      {error && <Text color="red.500" mb={4}>{error}</Text>}
      {loading && (
        <Box textAlign="center" py={6}><Spinner size="xl" /></Box>
      )}
      {!loading && !record && <Text>No records found.</Text>}
      {!loading && record && record.activities && record.activities.length > 0 && (
        <Box overflowX="auto" bg="white" borderRadius="md" boxShadow="sm" p={4}>
          <Table.Root>
            <Table.Header>
              <Table.Row>
                <Table.ColumnHeader>Date</Table.ColumnHeader>
                <Table.ColumnHeader>Activity Name</Table.ColumnHeader>
                <Table.ColumnHeader>Score</Table.ColumnHeader>
                <Table.ColumnHeader>Remarks</Table.ColumnHeader>
              </Table.Row>
            </Table.Header>
            <Table.Body>
              {record.activities.map((activity, idx) => (
                <Table.Row key={idx}>
                  <Table.Cell>{new Date(activity.date).toLocaleDateString()}</Table.Cell>
                  <Table.Cell>{activity.name}</Table.Cell>
                  <Table.Cell>{activity.score}</Table.Cell>
                  <Table.Cell>{activity.remarks || '-'}</Table.Cell>
                </Table.Row>
              ))}
            </Table.Body>
          </Table.Root>
        </Box>
      )}
      {!loading && record && (!record.activities || record.activities.length === 0) && (
        <Text>No activities recorded for this student.</Text>
      )}
    </Box>
  );
};

export default Records;

f) src/pages/ReportCard.js

jsx
import React, { useState, useEffect, useContext } from 'react';
import {
  Box,
  Heading,
  Select,
  Spinner,
  Text,
  Accordion,
  AccordionItem,
  AccordionButton,
  AccordionPanel,
  AccordionIcon,
  VStack,
  HStack,
  Tag,
  toaster,
} from '@chakra-ui/react';
import axios from 'axios';
import { AuthContext } from '../context/AuthContext';
import ReportCardForm from '../components/ReportCardForm';

const ReportCard = () => {
  const { auth } = useContext(AuthContext);
  const isTeacher = auth?.user?.role === 'teacher';

  const [students, setStudents] = useState([]);
  const [studentId, setStudentId] = useState('');
  const [reportCards, setReportCards] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  const fetchStudents = async () => {
    try {
      const res = await axios.get(
        `${process.env.REACT_APP_API_URL || 'http://localhost:5000'}/api/students`,
        { headers: { Authorization: `Bearer ${auth.token}` } }
      );
      setStudents(res.data);
    } catch {
      const msg = 'Failed to load students.';
      setError(msg);
      toaster.create({ title: 'Error', description: msg, status: 'error', duration: 5000, isClosable: true });
    }
  };

  const fetchReportCards = async () => {
    if (!studentId) {
      setReportCards([]);
      return;
    }
    setLoading(true);
    setError('');
    try {
      const res = await axios.get(
        `${process.env.REACT_APP_API_URL || 'http://localhost:5000'}/api/reportcards/${studentId}`,
        { headers: { Authorization: `Bearer ${auth.token}` } }
      );
      setReportCards(res.data);
    } catch {
      const msg = 'Failed to load report cards.';
      setError(msg);
      toaster.create({ title: 'Error', description: msg, status: 'error', duration: 5000, isClosable: true });
      setReportCards([]);
    } finally {
      setLoading(false);
    }
  };

  React.useEffect(() => {
    fetchStudents();
  }, []);

  React.useEffect(() => {
    fetchReportCards();
  }, [studentId]);

  return (
    <Box p={6}>
      <Heading mb={6} color="blue.700">Report Cards</Heading>
      {isTeacher && (
        <Select mb={6} placeholder="Select student" value={studentId} onChange={(e) => setStudentId(e.target.value)}>
          {students.map((student) => (
            <option key={student._id} value={student._id}>{student.name}</option>
          ))}
        </Select>
      )}
      {isTeacher && studentId && (
        <ReportCardForm studentId={studentId} token={auth.token} onUpdate={fetchReportCards} />
      )}
      {error && <Text color="red.500" mb={4}>{error}</Text>}
      {loading && <Box textAlign="center" py={6}><Spinner size="xl"/></Box>}
      {!loading && reportCards.length === 0 && <Text>No report cards found for this student.</Text>}
      {!loading && reportCards.length > 0 && (
        <Accordion allowToggle>
          {reportCards.map((rc) => (
            <AccordionItem key={rc._id}>
              <AccordionButton>
                <Box flex="1" textAlign="left" fontWeight="bold">{rc.term}</Box>
                <AccordionIcon/>
              </AccordionButton>
              <AccordionPanel pb={4}>
                <VStack align="start" spacing={4}>
                  {rc.grades.map((grade, idx) => (
                    <HStack key={idx} spacing={6}>
                      <Tag size="md" colorScheme="blue" minW="120px" textAlign="center">{grade.subject}</Tag>
                      <Text fontWeight="medium">{grade.grade}</Text>
                    </HStack>
                  ))}
                  {rc.comments && (
                    <Box mt={2}>
                      <Text fontWeight="semibold">Comments:</Text>
                      <Text whiteSpace="pre-wrap">{rc.comments}</Text>
                    </Box>
                  )}
                </VStack>
              </AccordionPanel>
            </AccordionItem>
          ))}
        </Accordion>
      )}
    </Box>
  );
};

export default ReportCard;

g) src/pages/Students.js

jsx
import React, { useState, useEffect, useContext } from 'react';
import { Box, Heading, Spinner, Text, Table, toaster } from '@chakra-ui/react';
import axios from 'axios';
import { AuthContext } from '../context/AuthContext';

const Students = () => {
  const { auth } = useContext(AuthContext);
  const [students, setStudents] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  const fetchStudents = async () => {
    setLoading(true);
    setError('');
    try {
      const res = await axios.get(
        `${process.env.REACT_APP_API_URL || 'http://localhost:5000'}/api/students`,
        { headers: { Authorization: `Bearer ${auth.token}` } }
      );
      setStudents(res.data);
    } catch {
      const msg = 'Failed to load students.';
      setError(msg);
      toaster.create({ title: 'Error', description: msg, status: 'error', duration: 5000, isClosable: true });
    } finally {
      setLoading(false);
    }
  };

  React.useEffect(() => {
    fetchStudents();
  }, []);

  return (
    <Box p={6}>
      <Heading mb={6} color="blue.700">Students</Heading>
      {loading && (<Box textAlign="center" py={6}><Spinner size="xl" /></Box>)}
      {error && <Text color="red.500" mb={4}>{error}</Text>}
      {!loading && students.length === 0 && <Text>No students found.</Text>}
      {!loading && students.length > 0 && (
        <Box overflowX="auto" bg="white" borderRadius="md" boxShadow="sm" p={4}>
          <Table.Root>
            <Table.Header>
              <Table.Row>
                <Table.ColumnHeader>Name</Table.ColumnHeader>
                <Table.ColumnHeader>Email</Table.ColumnHeader>
                <Table.ColumnHeader>Role</Table.ColumnHeader>
              </Table.Row>
            </Table.Header>
            <Table.Body>
              {students.map(({ _id, name, email, role }) => (
                <Table.Row key={_id}>
                  <Table.Cell>{name}</Table.Cell>
                  <Table.Cell>{email}</Table.Cell>
                  <Table.Cell>{role.charAt(0).toUpperCase() + role.slice(1)}</Table.Cell>
                </Table.Row>
              ))}
            </Table.Body>
          </Table.Root>
        </Box>
      )}
    </Box>
  );
};

export default Students;

h) src/pages/Teachers.js

jsx
import React, { useState, useEffect, useContext } from 'react';
import { Box, Heading, Spinner, Text, Table, toaster } from '@chakra-ui/react';
import axios from 'axios';
import { AuthContext } from '../context/AuthContext';

const Teachers = () => {
  const { auth } = useContext(AuthContext);
  const [teachers, setTeachers] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  const fetchTeachers = async () => {
    setLoading(true);
    setError('');
    try {
      const res = await axios.get(
        `${process.env.REACT_APP_API_URL || 'http://localhost:5000'}/api/teachers`,
        { headers: { Authorization: `Bearer ${auth.token}` } }
      );
      setTeachers(res.data);
    } catch {
      const msg = 'Failed to load teachers.';
      setError(msg);
      toaster.create({ title: 'Error', description: msg, status: 'error', duration: 5000, isClosable: true });
    } finally {
      setLoading(false);
    }
  };

  React.useEffect(() => {
    fetchTeachers();
  }, []);

  return (
    <Box p={6}>
      <Heading mb={6} color="blue.700">Teachers</Heading>
      {loading && (<Box textAlign="center" py={6}><Spinner size="xl"/></Box>)}
      {error && <Text color="red.500" mb={4}>{error}</Text>}
      {!loading && teachers.length === 0 && <Text>No teachers found.</Text>}
      {!loading && teachers.length > 0 && (
        <Box overflowX="auto" bg="white" borderRadius="md" boxShadow="sm" p={4}>
          <Table.Root>
            <Table.Header>
              <Table.Row>
                <Table.ColumnHeader>Name</Table.ColumnHeader>
                <Table.ColumnHeader>Email</Table.ColumnHeader>
              </Table.Row>
            </Table.Header>
            <Table.Body>
              {teachers.map(({ _id, name, email }) => (
                <Table.Row key={_id}>
                  <Table.Cell>{name}</Table.Cell>
                  <Table.Cell>{email}</Table.Cell>
                </Table.Row>
              ))}
            </Table.Body>
          </Table.Root>
        </Box>
      )}
    </Box>
  );
};

export default Teachers;

i) src/pages/Parents.js

jsx
import React, { useState, useEffect, useContext } from 'react';
import { Box, Heading, Spinner, Text, Table, toaster } from '@chakra-ui/react';
import axios from 'axios';
import { AuthContext } from '../context/AuthContext';

const Parents = () => {
  const { auth } = useContext(AuthContext);
  const [parents, setParents] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  const fetchParents = async () => {
    setLoading(true);
    setError('');
    try {
      const res = await axios.get(
        `${process.env.REACT_APP_API_URL || 'http://localhost:5000'}/api/parents`,
        { headers: { Authorization: `Bearer ${auth.token}` } }
      );
      setParents(res.data);
    } catch {
      const msg = 'Failed to fetch parents.';
      setError(msg);
      toaster.create({ title: 'Error', description: msg, status: 'error', duration: 5000, isClosable: true });
    } finally {
      setLoading(false);
    }
  };

  React.useEffect(() => {
    fetchParents();
  }, []);

  return (
    <Box p={6}>
      <Heading mb={6} color="blue.700">Parents</Heading>
      {loading && (<Box textAlign="center" py={6}><Spinner size="xl"/></Box>)}
      {error && <Text color="red.500" mb={4}>{error}</Text>}
      {!loading && parents.length === 0 && <Text>No parents found.</Text>}
      {!loading && parents.length > 0 && (
        <Box overflowX="auto" bg="white" borderRadius="md" boxShadow="sm" p={4}>
          <Table.Root>
            <Table.Header>
              <Table.Row>
                <Table.ColumnHeader>Name</Table.ColumnHeader>
                <Table.ColumnHeader>Email</Table.ColumnHeader>
                <Table.ColumnHeader>Linked Students</Table.ColumnHeader>
              </Table.Row>
            </Table.Header>
            <Table.Body>
              {parents.map(({ _id, name, email, linkedStudents }) => (
                <Table.Row key={_id}>
                  <Table.Cell>{name}</Table.Cell>
                  <Table.Cell>{email}</Table.Cell>
                  <Table.Cell>
                    {linkedStudents && linkedStudents.length > 0
                      ? linkedStudents.map((s) => s.name).join(', ')
                      : '-'}
                  </Table.Cell>
                </Table.Row>
              ))}
            </Table.Body>
          </Table.Root>
        </Box>
      )}
    </Box>
  );
};

export default Parents;

2. Form Components

(Example for one form: you can create others similarly)
src/components/RecordsForm.js

jsx
import React, { useState } from 'react';
import { Box, Button, Input, Textarea, VStack, Text, toaster } from '@chakra-ui/react';
import axios from 'axios';

const RecordsForm = ({ studentId, token, onUpdate }) => {
  const [activityName, setActivityName] = useState('');
  const [date, setDate] = useState('');
  const [score, setScore] = useState('');
  const [remarks, setRemarks] = useState('');
  const [loading, setLoading] = useState(false);

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!activityName || !date || !score) {
      toaster.create({
        title: 'Validation error',
        description: 'Please fill all required fields',
        status: 'warning',
        duration: 4000,
        isClosable: true,
      });
      return;
    }
    setLoading(true);
    try {
      await axios.post(
        `${process.env.REACT_APP_API_URL || 'http://localhost:5000'}/api/records/${studentId}`,
        { name: activityName, date, score, remarks },
        { headers: { Authorization: `Bearer ${token}` } }
      );
      toaster.create({
        title: 'Record added',
        status: 'success',
        duration: 4000,
        isClosable: true,
      });
      setActivityName('');
      setDate('');
      setScore('');
      setRemarks('');
      if (onUpdate) onUpdate();
    } catch (err) {
      toaster.create({
        title: 'Failed to add record',
        description: err.response?.data?.message || 'Server error',
        status: 'error',
        duration: 5000,
        isClosable: true,
      });
    }
    setLoading(false);
  };

  return (
    <Box as="form" onSubmit={handleSubmit} mb={6}>
      <VStack spacing={4} align="flex-start">
        <Box w="100%">
          <Text fontWeight="semibold" mb={1}>Activity Name*</Text>
          <Input value={activityName} onChange={(e) => setActivityName(e.target.value)} required />
        </Box>
        <Box w="100%">
          <Text fontWeight="semibold" mb={1}>Date*</Text>
          <Input type="date" value={date} onChange={(e) => setDate(e.target.value)} required />
        </Box>
        <Box w="100%">
          <Text fontWeight="semibold" mb={1}>Score*</Text>
          <Input type="number" value={score} onChange={(e) => setScore(e.target.value)} required />
        </Box>
        <Box w="100%">
          <Text fontWeight="semibold" mb={1}>Remarks</Text>
          <Textarea value={remarks} onChange={(e) => setRemarks(e.target.value)} />
        </Box>
        <Button type="submit" colorScheme="blue" isLoading={loading} width="full">
          Add Record
        </Button>
      </VStack>
    </Box>
  );
};

export default RecordsForm;

Similarly, you can create AttendanceForm.js and ReportCardForm.js following this style (use native inputs, no FormControl).
3. Updated App.js

jsx
import React from 'react';
import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';

import Login from './pages/Login';
import Register from './pages/Register';
import Dashboard from './pages/Dashboard';
import Attendance from './pages/Attendance';
import Records from './pages/Records';
import ReportCard from './pages/ReportCard';
import Students from './pages/Students';
import Teachers from './pages/Teachers';
import Parents from './pages/Parents';

import AuthProvider from './context/AuthContext';
import PrivateRoute from './components/PrivateRoute'; // Your auth guard component

const App = () => {
  return (
    <AuthProvider>
      <Router>
        <Routes>
          {/* Public routes */}
          <Route path="/login" element={<Login />} />
          <Route path="/register" element={<Register />} />

          {/* Protected routes */}
          <Route
            path="/"
            element={
              <PrivateRoute>
                <Dashboard />
              </PrivateRoute>
            }
          />
          <Route
            path="/dashboard"
            element={
              <PrivateRoute>
                <Dashboard />
              </PrivateRoute>
            }
          />
          <Route
            path="/attendance"
            element={
              <PrivateRoute>
                <Attendance />
              </PrivateRoute>
            }
          />
          <Route
            path="/records"
            element={
              <PrivateRoute>
                <Records />
              </PrivateRoute>
            }
          />
          <Route
            path="/reportcard"
            element={
              <PrivateRoute>
                <ReportCard />
              </PrivateRoute>
            }
          />
          <Route
            path="/students"
            element={
              <PrivateRoute>
                <Students />
              </PrivateRoute>
            }
          />
          <Route
            path="/teachers"
            element={
              <PrivateRoute>
                <Teachers />
              </PrivateRoute>
            }
          />
          <Route
            path="/parents"
            element={
              <PrivateRoute>
                <Parents />
              </PrivateRoute>
            }
          />

          {/* Redirect unmatched routes to dashboard or login */}
          <Route path="*" element={<Navigate to="/dashboard" replace />} />
        </Routes>
      </Router>
    </AuthProvider>
  );
};

export default App;